<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="misc_8cpp" kind="file" language="C++">
    <compoundname>misc.cpp</compoundname>
    <includes local="no">algorithm</includes>
    <includes local="no">cctype</includes>
    <includes local="no">iostream</includes>
    <includes local="no">iterator</includes>
    <includes local="no">filesystem</includes>
    <includes refid="misc_8h" local="no">VoronoiMeshMaker/Misc/misc.h</includes>
    <incdepgraph>
      <node id="11">
        <label>list</label>
      </node>
      <node id="9">
        <label>VoronoiMeshMaker/Misc/configure.h</label>
        <link refid="configure_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>filesystem</label>
      </node>
      <node id="5">
        <label>iterator</label>
      </node>
      <node id="1">
        <label>VoronoiMeshMaker/src/VoronoiMeshMaker/Misc/misc.cpp</label>
        <link refid="misc_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>vector</label>
      </node>
      <node id="15">
        <label>CGAL/Polyhedron_3.h</label>
      </node>
      <node id="16">
        <label>VoronoiMeshMaker/Misc/namespace.h</label>
        <link refid="namespace_8h"/>
      </node>
      <node id="14">
        <label>CGAL/Polygon_2.h</label>
      </node>
      <node id="3">
        <label>cctype</label>
      </node>
      <node id="4">
        <label>iostream</label>
      </node>
      <node id="10">
        <label>VoronoiMeshMaker/Misc/type.h</label>
        <link refid="type_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>VoronoiMeshMaker/Misc/misc.h</label>
        <link refid="misc_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>algorithm</label>
      </node>
      <node id="8">
        <label>memory</label>
      </node>
      <node id="13">
        <label>CGAL/Exact_predicates_inexact_constructions_kernel.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="misc_8cpp_1ac407497aa96cd593f82054cb1d0f9d44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>namespace void</type>
        <definition>namespace void PrintLine</definition>
        <argsstring>(std::ostream &amp;_os, const unsigned &amp;_lsize)</argsstring>
        <name>PrintLine</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>_os</declname>
        </param>
        <param>
          <type>const unsigned &amp;</type>
          <declname>_lsize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="VoronoiMeshMaker/src/VoronoiMeshMaker/Misc/misc.cpp" line="1" column="0" bodyfile="VoronoiMeshMaker/src/VoronoiMeshMaker/Misc/misc.cpp" bodystart="27" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="misc_8cpp_1a985265b46460da20cbf001822766d647" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool string2bool</definition>
        <argsstring>(std::string_view str)</argsstring>
        <name>string2bool</name>
        <param>
          <type>std::string_view</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Converts a string to a boolean value. </para>
        </briefdescription>
        <detaileddescription>
<para>This function converts a string representing a boolean value (e.g., &quot;true&quot; or &quot;false&quot;) to its corresponding boolean value. The string is case-insensitive.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">str</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to convert. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The boolean value corresponding to the string. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="VoronoiMeshMaker/src/VoronoiMeshMaker/Misc/misc.cpp" line="51" column="7" bodyfile="VoronoiMeshMaker/src/VoronoiMeshMaker/Misc/misc.cpp" bodystart="51" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="misc_8cpp_1a9e891519e444259a82f8abce71405a3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::filesystem::path</type>
        <definition>std::filesystem::path getCurrentWorkingDirectory</definition>
        <argsstring>()</argsstring>
        <name>getCurrentWorkingDirectory</name>
        <briefdescription>
<para>Gets the current working directory. </para>
        </briefdescription>
        <detaileddescription>
<para>This function retrieves the current working directory of the process.</para>
<para><simplesect kind="return"><para>The current working directory as a path object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="VoronoiMeshMaker/src/VoronoiMeshMaker/Misc/misc.cpp" line="69" column="24" bodyfile="VoronoiMeshMaker/src/VoronoiMeshMaker/Misc/misc.cpp" bodystart="69" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="misc_8cpp_1ac9806cd378f037c83ab3aceb1a19feb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::filesystem::path</type>
        <definition>std::filesystem::path getFullPath</definition>
        <argsstring>(std::string_view path)</argsstring>
        <name>getFullPath</name>
        <param>
          <type>std::string_view</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Gets the full path of a given file or directory. </para>
        </briefdescription>
        <detaileddescription>
<para>This function converts a relative or absolute path into a full path.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">path</parametername>
</parameternamelist>
<parameterdescription>
<para>The relative or absolute path to be converted. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The full path as a path object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="VoronoiMeshMaker/src/VoronoiMeshMaker/Misc/misc.cpp" line="82" column="24" bodyfile="VoronoiMeshMaker/src/VoronoiMeshMaker/Misc/misc.cpp" bodystart="82" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="misc_8cpp_1a646152adfcdba3667d3bc35943d9b27f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string RenameFile</definition>
        <argsstring>(std::string_view filename, std::string_view newFiletype)</argsstring>
        <name>RenameFile</name>
        <param>
          <type>std::string_view</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>std::string_view</type>
          <declname>newFiletype</declname>
        </param>
        <briefdescription>
<para>Renames a file by changing its extension. </para>
        </briefdescription>
        <detaileddescription>
<para>This function renames a file by replacing its current extension with a new extension. If the file already has the new extension, the original name is returned.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">filename</parametername>
</parameternamelist>
<parameterdescription>
<para>The current name of the file. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">newFiletype</parametername>
</parameternamelist>
<parameterdescription>
<para>The new file extension. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The new name of the file. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="VoronoiMeshMaker/src/VoronoiMeshMaker/Misc/misc.cpp" line="97" column="14" bodyfile="VoronoiMeshMaker/src/VoronoiMeshMaker/Misc/misc.cpp" bodystart="97" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="misc_8cpp_1aa73ff0099786430ee5e37374a3276f82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CreateDirectoryIfNotExists</definition>
        <argsstring>(std::string_view path)</argsstring>
        <name>CreateDirectoryIfNotExists</name>
        <param>
          <type>std::string_view</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Creates a directory if it does not exist. </para>
        </briefdescription>
        <detaileddescription>
<para>This function checks whether the specified directory exists, and if not, creates it.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>The path of the directory to create. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the directory was created or already exists, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="VoronoiMeshMaker/src/VoronoiMeshMaker/Misc/misc.cpp" line="120" column="6" bodyfile="VoronoiMeshMaker/src/VoronoiMeshMaker/Misc/misc.cpp" bodystart="120" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="misc_8cpp_1ac2076ea4e93e8f09a8dfb314c52627f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const vmm::gtp::Point2D &amp;point)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="type_8h_1a1b753fd9c2659910ca1a042a05b56be6a380e147fdd03a8304fb1bfc1450ff23e" kindref="member">vmm::gtp::Point2D</ref> &amp;</type>
          <declname>point</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="VoronoiMeshMaker/src/VoronoiMeshMaker/Misc/misc.cpp" line="129" column="1" bodyfile="VoronoiMeshMaker/src/VoronoiMeshMaker/Misc/misc.cpp" bodystart="129" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="misc_8cpp_1a5e11faa81d5a76e8106d3290e6b4aecb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const vmm::gtp::Vector2D &amp;vector)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="type_8h_1a1b753fd9c2659910ca1a042a05b56be6a4d3bc1733d8e5810f06604007e787bb2" kindref="member">vmm::gtp::Vector2D</ref> &amp;</type>
          <declname>vector</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="VoronoiMeshMaker/src/VoronoiMeshMaker/Misc/misc.cpp" line="134" column="1" bodyfile="VoronoiMeshMaker/src/VoronoiMeshMaker/Misc/misc.cpp" bodystart="134" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="misc_8cpp_1a396299ffedb95df48937ebf72b0d5f4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const vmm::gtp::Point3D &amp;point)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="type_8h_1a1b753fd9c2659910ca1a042a05b56be6a1685c4cb9754df6a8c65c8564d8d0d74" kindref="member">vmm::gtp::Point3D</ref> &amp;</type>
          <declname>point</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="VoronoiMeshMaker/src/VoronoiMeshMaker/Misc/misc.cpp" line="139" column="1" bodyfile="VoronoiMeshMaker/src/VoronoiMeshMaker/Misc/misc.cpp" bodystart="139" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="misc_8cpp_1a29889402c621a0670392fdbc084c90ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const vmm::gtp::Vector3D &amp;vector)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="type_8h_1a1b753fd9c2659910ca1a042a05b56be6a11d6d4839c41bcd39255a062482c2628" kindref="member">vmm::gtp::Vector3D</ref> &amp;</type>
          <declname>vector</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="VoronoiMeshMaker/src/VoronoiMeshMaker/Misc/misc.cpp" line="144" column="1" bodyfile="VoronoiMeshMaker/src/VoronoiMeshMaker/Misc/misc.cpp" bodystart="144" bodyend="147"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Includes<sp/>C++<sp/>Standard<sp/>Libraries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::generate_n</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cctype&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>std::isspace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::iostream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iterator&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::ostream_iterator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;filesystem&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create_directory,<sp/>exists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Includes<sp/>VoronoiMeshMaker</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="misc_8h" kindref="compound">VoronoiMeshMaker/Misc/misc.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><ref refid="namespace_8h_1a0850a440be7718d521600f120ee783e5" kindref="member">VORMAKER_NAMESPACE_OPEN</ref></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="misc_8cpp_1ac407497aa96cd593f82054cb1d0f9d44" kindref="member">PrintLine</ref>(std::ostream&amp;<sp/>_os,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">&amp;<sp/>_lsize)<sp/></highlight></codeline>
<codeline lineno="28"><highlight class="normal">{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ASCIINUMBER(0x3D);<sp/></highlight><highlight class="comment">//<sp/>&apos;=&apos;<sp/>character</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>PrintAscII<sp/>=<sp/>[]()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ASCIINUMBER;<sp/>};</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>std::generate_n(</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ostream_iterator&lt;char&gt;(_os,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_lsize,</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintAscII</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>_os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="40"><highlight class="normal">}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal">[[nodiscard]]<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="misc_8cpp_1a985265b46460da20cbf001822766d647" kindref="member">string2bool</ref>(std::string_view<sp/>str)<sp/></highlight></codeline>
<codeline lineno="52"><highlight class="normal">{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>lowerStr(str);<sp/><sp/></highlight><highlight class="comment">//<sp/>Converte<sp/>para<sp/>std::string<sp/>apenas<sp/>se<sp/>for<sp/>necessário</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>std::transform(lowerStr.begin(),<sp/>lowerStr.end(),<sp/>lowerStr.begin(),<sp/>::tolower);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>std::istringstream<sp/>is(lowerStr);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>b;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>is<sp/>&gt;&gt;<sp/>std::boolalpha<sp/>&gt;&gt;<sp/>b;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b;</highlight></codeline>
<codeline lineno="60"><highlight class="normal">}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal">[[nodiscard]]<sp/>std::filesystem::path<sp/><ref refid="misc_8cpp_1a9e891519e444259a82f8abce71405a3b" kindref="member">getCurrentWorkingDirectory</ref>()<sp/></highlight></codeline>
<codeline lineno="70"><highlight class="normal">{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::filesystem::current_path();</highlight></codeline>
<codeline lineno="72"><highlight class="normal">}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal">[[nodiscard]]<sp/>std::filesystem::path<sp/><ref refid="misc_8cpp_1ac9806cd378f037c83ab3aceb1a19feb4" kindref="member">getFullPath</ref>(std::string_view<sp/>path)<sp/></highlight></codeline>
<codeline lineno="83"><highlight class="normal">{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::filesystem::absolute(path);</highlight></codeline>
<codeline lineno="85"><highlight class="normal">}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal">[[nodiscard]]<sp/>std::string<sp/><ref refid="misc_8cpp_1a646152adfcdba3667d3bc35943d9b27f" kindref="member">RenameFile</ref>(std::string_view<sp/>filename,<sp/>std::string_view<sp/>newFiletype)<sp/></highlight></codeline>
<codeline lineno="98"><highlight class="normal">{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>lastDot<sp/>=<sp/>filename.find_last_of(</highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>newFilename;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lastDot<sp/>!=<sp/>std::string::npos)<sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newFilename<sp/>=<sp/>std::string(filename.substr(0,<sp/>lastDot))<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::string(newFiletype);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newFilename<sp/>=<sp/>std::string(filename)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::string(newFiletype);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>std::filesystem::rename(filename,<sp/>newFilename);<sp/><sp/></highlight><highlight class="comment">//<sp/>Renomeia<sp/>o<sp/>arquivo<sp/>no<sp/>sistema<sp/>de<sp/>arquivos</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>newFilename;</highlight></codeline>
<codeline lineno="110"><highlight class="normal">}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="misc_8cpp_1aa73ff0099786430ee5e37374a3276f82" kindref="member">CreateDirectoryIfNotExists</ref>(std::string_view<sp/>path)<sp/></highlight></codeline>
<codeline lineno="121"><highlight class="normal">{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::filesystem::exists(path)<sp/>||<sp/>std::filesystem::create_directory(path);</highlight></codeline>
<codeline lineno="123"><highlight class="normal">}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Overload<sp/>operator&lt;&lt;<sp/>for<sp/>CGAL<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal">std::ostream&amp;<sp/><ref refid="misc_8cpp_1ac2076ea4e93e8f09a8dfb314c52627f1" kindref="member">operator&lt;&lt;</ref>(std::ostream&amp;<sp/>os,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="type_8h_1aaaf5a4f3fcdfb59de2f926961baa8ad9" kindref="member">vmm::gtp::Point2D</ref>&amp;<sp/>point)<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Point_2(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>point.x()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>point.y()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os;</highlight></codeline>
<codeline lineno="132"><highlight class="normal">}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal">std::ostream&amp;<sp/><ref refid="misc_8cpp_1ac2076ea4e93e8f09a8dfb314c52627f1" kindref="member">operator&lt;&lt;</ref>(std::ostream&amp;<sp/>os,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="type_8h_1ac4223c9df6fc9e13ce379144da5b09aa" kindref="member">vmm::gtp::Vector2D</ref>&amp;<sp/>vector)<sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Vector_2(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>vector.x()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>vector.y()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os;</highlight></codeline>
<codeline lineno="137"><highlight class="normal">}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal">std::ostream&amp;<sp/><ref refid="misc_8cpp_1ac2076ea4e93e8f09a8dfb314c52627f1" kindref="member">operator&lt;&lt;</ref>(std::ostream&amp;<sp/>os,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="type_8h_1ac7e02506cf8ef76c662fc459a35bc5f6" kindref="member">vmm::gtp::Point3D</ref>&amp;<sp/>point)<sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Point_3(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>point.x()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>point.y()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>point.z()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os;</highlight></codeline>
<codeline lineno="142"><highlight class="normal">}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal">std::ostream&amp;<sp/><ref refid="misc_8cpp_1ac2076ea4e93e8f09a8dfb314c52627f1" kindref="member">operator&lt;&lt;</ref>(std::ostream&amp;<sp/>os,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="type_8h_1a7724755c44fb4913c5f7a3dc1a00c7c3" kindref="member">vmm::gtp::Vector3D</ref>&amp;<sp/>vector)<sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Vector_3(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>vector.x()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>vector.y()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>vector.z()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os;</highlight></codeline>
<codeline lineno="147"><highlight class="normal">}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><ref refid="namespace_8h_1a79d315e8c3400ea5f4ad4175a85d291c" kindref="member">VORMAKER_NAMESPACE_CLOSE</ref></highlight></codeline>
    </programlisting>
    <location file="VoronoiMeshMaker/src/VoronoiMeshMaker/Misc/misc.cpp"/>
  </compounddef>
</doxygen>
