<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="GeometricDataHolder_8cpp" kind="file" language="C++">
    <compoundname>GeometricDataHolder.cpp</compoundname>
    <includes refid="GeometricDataHolder_8h" local="no">VoronoiMeshMaker/Parameters/GeometricDataHolder.h</includes>
    <incdepgraph>
      <node id="7">
        <label>list</label>
      </node>
      <node id="4">
        <label>variant</label>
      </node>
      <node id="3">
        <label>map</label>
      </node>
      <node id="1">
        <label>VoronoiMeshMaker/src/VoronoiMeshMaker/Parameters/GeometricDataHolder.cpp</label>
        <link refid="GeometricDataHolder_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>string_view</label>
      </node>
      <node id="14">
        <label>VoronoiMeshMaker/Parameters/GeometricDataHolder.tpp</label>
        <link refid="GeometricDataHolder_8tpp"/>
      </node>
      <node id="9">
        <label>vector</label>
      </node>
      <node id="12">
        <label>CGAL/Polyhedron_3.h</label>
      </node>
      <node id="13">
        <label>VoronoiMeshMaker/Misc/namespace.h</label>
        <link refid="namespace_8h"/>
      </node>
      <node id="11">
        <label>CGAL/Polygon_2.h</label>
      </node>
      <node id="6">
        <label>VoronoiMeshMaker/Misc/type.h</label>
        <link refid="type_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>memory</label>
      </node>
      <node id="2">
        <label>VoronoiMeshMaker/Parameters/GeometricDataHolder.h</label>
        <link refid="GeometricDataHolder_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>CGAL/Exact_predicates_inexact_constructions_kernel.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="GeometricDataHolder_8cpp_1ac8955cb10cca7e7b0c9d9f89e5af0394" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>namespace std::ostream &amp;</type>
        <definition>namespace std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const GeometricDataHolder &amp;holder)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const GeometricDataHolder &amp;</type>
          <declname>holder</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="VoronoiMeshMaker/src/VoronoiMeshMaker/Parameters/GeometricDataHolder.cpp" line="1" column="0" bodyfile="VoronoiMeshMaker/src/VoronoiMeshMaker/Parameters/GeometricDataHolder.cpp" bodystart="44" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="GeometricDataHolder_8cpp_1a71dad13c95ea1494c073d550ae248c63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void GeometricDataHolder::set&lt; gtp::Point2D &gt;</definition>
        <argsstring>(std::string_view, gtp::Point2D)</argsstring>
        <name>GeometricDataHolder::set&lt; gtp::Point2D &gt;</name>
        <param>
          <type>std::string_view</type>
        </param>
        <param>
          <type><ref refid="type_8h_1a1b753fd9c2659910ca1a042a05b56be6a380e147fdd03a8304fb1bfc1450ff23e" kindref="member">gtp::Point2D</ref></type>
        </param>
        <briefdescription>
<para>Explicit instantiation for setting a Point2D value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="VoronoiMeshMaker/src/VoronoiMeshMaker/Parameters/GeometricDataHolder.cpp" line="85" column="10" declfile="VoronoiMeshMaker/src/VoronoiMeshMaker/Parameters/GeometricDataHolder.cpp" declline="85" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="GeometricDataHolder_8cpp_1a534b4e0639863b3c5f8ef6099606cb7f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>template std::optional&lt; <ref refid="type_8h_1a1b753fd9c2659910ca1a042a05b56be6a380e147fdd03a8304fb1bfc1450ff23e" kindref="member">gtp::Point2D</ref> &gt;</type>
        <definition>template std::optional&lt;gtp::Point2D&gt; GeometricDataHolder::get&lt; gtp::Point2D &gt;</definition>
        <argsstring>(std::string_view) const</argsstring>
        <name>GeometricDataHolder::get&lt; gtp::Point2D &gt;</name>
        <param>
          <type>std::string_view</type>
        </param>
        <briefdescription>
<para>Explicit instantiation for getting a Point2D value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="VoronoiMeshMaker/src/VoronoiMeshMaker/Parameters/GeometricDataHolder.cpp" line="90" column="1" declfile="VoronoiMeshMaker/src/VoronoiMeshMaker/Parameters/GeometricDataHolder.cpp" declline="90" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="GeometricDataHolder_8cpp_1ad98e53c68c1b0ec2b31c97a53a0b8371" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void GeometricDataHolder::set&lt; gtp::Vector2D &gt;</definition>
        <argsstring>(std::string_view, gtp::Vector2D)</argsstring>
        <name>GeometricDataHolder::set&lt; gtp::Vector2D &gt;</name>
        <param>
          <type>std::string_view</type>
        </param>
        <param>
          <type><ref refid="type_8h_1a1b753fd9c2659910ca1a042a05b56be6a4d3bc1733d8e5810f06604007e787bb2" kindref="member">gtp::Vector2D</ref></type>
        </param>
        <briefdescription>
<para>Explicit instantiation for setting a Vector2D value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="VoronoiMeshMaker/src/VoronoiMeshMaker/Parameters/GeometricDataHolder.cpp" line="95" column="10" declfile="VoronoiMeshMaker/src/VoronoiMeshMaker/Parameters/GeometricDataHolder.cpp" declline="95" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="GeometricDataHolder_8cpp_1a8ef160d409cb5d1ec90f8b1101cb2d79" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>template std::optional&lt; <ref refid="type_8h_1a1b753fd9c2659910ca1a042a05b56be6a4d3bc1733d8e5810f06604007e787bb2" kindref="member">gtp::Vector2D</ref> &gt;</type>
        <definition>template std::optional&lt;gtp::Vector2D&gt; GeometricDataHolder::get&lt; gtp::Vector2D &gt;</definition>
        <argsstring>(std::string_view) const</argsstring>
        <name>GeometricDataHolder::get&lt; gtp::Vector2D &gt;</name>
        <param>
          <type>std::string_view</type>
        </param>
        <briefdescription>
<para>Explicit instantiation for getting a Vector2D value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="VoronoiMeshMaker/src/VoronoiMeshMaker/Parameters/GeometricDataHolder.cpp" line="100" column="1" declfile="VoronoiMeshMaker/src/VoronoiMeshMaker/Parameters/GeometricDataHolder.cpp" declline="100" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="GeometricDataHolder_8cpp_1ab568dfd91e960be56a027b2a525fb763" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void GeometricDataHolder::set&lt; gtp::Point3D &gt;</definition>
        <argsstring>(std::string_view, gtp::Point3D)</argsstring>
        <name>GeometricDataHolder::set&lt; gtp::Point3D &gt;</name>
        <param>
          <type>std::string_view</type>
        </param>
        <param>
          <type><ref refid="type_8h_1a1b753fd9c2659910ca1a042a05b56be6a1685c4cb9754df6a8c65c8564d8d0d74" kindref="member">gtp::Point3D</ref></type>
        </param>
        <briefdescription>
<para>Explicit instantiation for setting a Point3D value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="VoronoiMeshMaker/src/VoronoiMeshMaker/Parameters/GeometricDataHolder.cpp" line="105" column="10" declfile="VoronoiMeshMaker/src/VoronoiMeshMaker/Parameters/GeometricDataHolder.cpp" declline="105" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="GeometricDataHolder_8cpp_1a6c916ec90f8cdf7542a3e71634b9ba9a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>template std::optional&lt; <ref refid="type_8h_1a1b753fd9c2659910ca1a042a05b56be6a1685c4cb9754df6a8c65c8564d8d0d74" kindref="member">gtp::Point3D</ref> &gt;</type>
        <definition>template std::optional&lt;gtp::Point3D&gt; GeometricDataHolder::get&lt; gtp::Point3D &gt;</definition>
        <argsstring>(std::string_view) const</argsstring>
        <name>GeometricDataHolder::get&lt; gtp::Point3D &gt;</name>
        <param>
          <type>std::string_view</type>
        </param>
        <briefdescription>
<para>Explicit instantiation for getting a Point3D value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="VoronoiMeshMaker/src/VoronoiMeshMaker/Parameters/GeometricDataHolder.cpp" line="110" column="1" declfile="VoronoiMeshMaker/src/VoronoiMeshMaker/Parameters/GeometricDataHolder.cpp" declline="110" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="GeometricDataHolder_8cpp_1aa375a4dbb14d5c33cc59b2df91058545" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void GeometricDataHolder::set&lt; gtp::Vector3D &gt;</definition>
        <argsstring>(std::string_view, gtp::Vector3D)</argsstring>
        <name>GeometricDataHolder::set&lt; gtp::Vector3D &gt;</name>
        <param>
          <type>std::string_view</type>
        </param>
        <param>
          <type><ref refid="type_8h_1a1b753fd9c2659910ca1a042a05b56be6a11d6d4839c41bcd39255a062482c2628" kindref="member">gtp::Vector3D</ref></type>
        </param>
        <briefdescription>
<para>Explicit instantiation for setting a Vector3D value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="VoronoiMeshMaker/src/VoronoiMeshMaker/Parameters/GeometricDataHolder.cpp" line="115" column="10" declfile="VoronoiMeshMaker/src/VoronoiMeshMaker/Parameters/GeometricDataHolder.cpp" declline="115" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="GeometricDataHolder_8cpp_1a5d136ef1707ffd419d3a94b9ed1192b7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>template std::optional&lt; <ref refid="type_8h_1a1b753fd9c2659910ca1a042a05b56be6a11d6d4839c41bcd39255a062482c2628" kindref="member">gtp::Vector3D</ref> &gt;</type>
        <definition>template std::optional&lt;gtp::Vector3D&gt; GeometricDataHolder::get&lt; gtp::Vector3D &gt;</definition>
        <argsstring>(std::string_view) const</argsstring>
        <name>GeometricDataHolder::get&lt; gtp::Vector3D &gt;</name>
        <param>
          <type>std::string_view</type>
        </param>
        <briefdescription>
<para>Explicit instantiation for getting a Vector3D value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="VoronoiMeshMaker/src/VoronoiMeshMaker/Parameters/GeometricDataHolder.cpp" line="120" column="1" declfile="VoronoiMeshMaker/src/VoronoiMeshMaker/Parameters/GeometricDataHolder.cpp" declline="120" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="GeometricDataHolder_8cpp_1afd99df0a88fb382d6e4833dbcfce1fcc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void GeometricDataHolder::set&lt; std::list&lt; int &gt; &gt;</definition>
        <argsstring>(std::string_view, std::list&lt; int &gt;)</argsstring>
        <name>GeometricDataHolder::set&lt; std::list&lt; int &gt; &gt;</name>
        <param>
          <type>std::string_view</type>
        </param>
        <param>
          <type>std::list&lt; int &gt;</type>
        </param>
        <briefdescription>
<para>Explicit instantiation for setting a list of integers. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="VoronoiMeshMaker/src/VoronoiMeshMaker/Parameters/GeometricDataHolder.cpp" line="125" column="10" declfile="VoronoiMeshMaker/src/VoronoiMeshMaker/Parameters/GeometricDataHolder.cpp" declline="125" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="GeometricDataHolder_8cpp_1a37de3cdd35dc7d2bf8df58a6eb084315" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>template std::optional&lt; std::list&lt; int &gt; &gt;</type>
        <definition>template std::optional&lt;std::list&lt;int&gt; &gt; GeometricDataHolder::get&lt; std::list&lt; int &gt; &gt;</definition>
        <argsstring>(std::string_view) const</argsstring>
        <name>GeometricDataHolder::get&lt; std::list&lt; int &gt; &gt;</name>
        <param>
          <type>std::string_view</type>
        </param>
        <briefdescription>
<para>Explicit instantiation for getting a list of integers. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="VoronoiMeshMaker/src/VoronoiMeshMaker/Parameters/GeometricDataHolder.cpp" line="130" column="1" declfile="VoronoiMeshMaker/src/VoronoiMeshMaker/Parameters/GeometricDataHolder.cpp" declline="130" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="GeometricDataHolder_8cpp_1a3f9422529e30d6e5c7514d686e6952b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void GeometricDataHolder::set&lt; std::list&lt; Real &gt; &gt;</definition>
        <argsstring>(std::string_view, std::list&lt; Real &gt;)</argsstring>
        <name>GeometricDataHolder::set&lt; std::list&lt; Real &gt; &gt;</name>
        <param>
          <type>std::string_view</type>
        </param>
        <param>
          <type>std::list&lt; <ref refid="type_8h_1a072dccfc5a1d0d1857f478d50044f66f" kindref="member">Real</ref> &gt;</type>
        </param>
        <briefdescription>
<para>Explicit instantiation for setting a list of Real values. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="VoronoiMeshMaker/src/VoronoiMeshMaker/Parameters/GeometricDataHolder.cpp" line="135" column="10" declfile="VoronoiMeshMaker/src/VoronoiMeshMaker/Parameters/GeometricDataHolder.cpp" declline="135" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="GeometricDataHolder_8cpp_1a97e256a7b91540f400a9c44da85ead1c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>template std::optional&lt; std::list&lt; <ref refid="type_8h_1a072dccfc5a1d0d1857f478d50044f66f" kindref="member">Real</ref> &gt; &gt;</type>
        <definition>template std::optional&lt;std::list&lt;Real&gt; &gt; GeometricDataHolder::get&lt; std::list&lt; Real &gt; &gt;</definition>
        <argsstring>(std::string_view) const</argsstring>
        <name>GeometricDataHolder::get&lt; std::list&lt; Real &gt; &gt;</name>
        <param>
          <type>std::string_view</type>
        </param>
        <briefdescription>
<para>Explicit instantiation for getting a list of Real values. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="VoronoiMeshMaker/src/VoronoiMeshMaker/Parameters/GeometricDataHolder.cpp" line="140" column="1" declfile="VoronoiMeshMaker/src/VoronoiMeshMaker/Parameters/GeometricDataHolder.cpp" declline="140" declcolumn="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Name<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>GeometricDataHolder.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Author<sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>João<sp/>Flávio<sp/>Vieira<sp/>de<sp/>Vasconcellos</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Version<sp/><sp/><sp/><sp/><sp/>:<sp/>1.1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Description<sp/>:<sp/>Implementation<sp/>of<sp/>methods<sp/>for<sp/>GeometricDataHolder<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/><sp/><sp/>:<sp/>Copyright<sp/>(C)<sp/>2024<sp/>João<sp/>Flávio<sp/>Vasconcellos</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(jflavio<sp/>at<sp/>iprj.uerj.br)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>License<sp/><sp/><sp/><sp/><sp/>:<sp/>This<sp/>program<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>program<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/>See<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>along<sp/>with<sp/>this<sp/>program.<sp/>If<sp/>not,<sp/>see<sp/>&lt;https://www.gnu.org/licenses/&gt;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Includes<sp/>from<sp/>VoronoiMeshMaker<sp/>library</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="GeometricDataHolder_8h" kindref="compound">VoronoiMeshMaker/Parameters/GeometricDataHolder.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><ref refid="namespace_8h_1a0850a440be7718d521600f120ee783e5" kindref="member">VORMAKER_NAMESPACE_OPEN</ref></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal">std::ostream&amp;<sp/><ref refid="GeometricDataHolder_8cpp_1ac8955cb10cca7e7b0c9d9f89e5af0394" kindref="member">operator&lt;&lt;</ref>(std::ostream&amp;<sp/>os,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceGeometricDataHolder" kindref="compound">GeometricDataHolder</ref>&amp;<sp/>holder)<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Sort<sp/>the<sp/>data<sp/>by<sp/>key<sp/>for<sp/>ordered<sp/>output</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::pair&lt;std::string,<sp/>std::variant&lt;int,<sp/><ref refid="type_8h_1a072dccfc5a1d0d1857f478d50044f66f" kindref="member">Real</ref>,<sp/>std::string,</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="type_8h_1aaaf5a4f3fcdfb59de2f926961baa8ad9" kindref="member">gtp::Point2D</ref>,<sp/><ref refid="type_8h_1ac4223c9df6fc9e13ce379144da5b09aa" kindref="member">gtp::Vector2D</ref>,</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="type_8h_1ac7e02506cf8ef76c662fc459a35bc5f6" kindref="member">gtp::Point3D</ref>,<sp/><ref refid="type_8h_1a7724755c44fb4913c5f7a3dc1a00c7c3" kindref="member">gtp::Vector3D</ref>,</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::list&lt;int&gt;,<sp/>std::list&lt;Real&gt;&gt;&gt;&gt;<sp/>sorted_data(holder.data_.begin(),<sp/>holder.data_.end());</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>std::sort(sorted_data.begin(),<sp/>sorted_data.end(),</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>b)<sp/>{<sp/>return<sp/>a.first<sp/>&lt;<sp/>b.first;<sp/>});</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Determine<sp/>the<sp/>maximum<sp/>key<sp/>length<sp/>for<sp/>alignment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>max_key_length<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>[key,<sp/>_]<sp/>:<sp/>sorted_data)<sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_key_length<sp/>=<sp/>std::max(max_key_length,<sp/>key.length());</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Print<sp/>each<sp/>key-value<sp/>pair<sp/>in<sp/>a<sp/>formatted<sp/>manner</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>[key,<sp/>value]<sp/>:<sp/>sorted_data)<sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>std::left<sp/>&lt;&lt;<sp/>std::setw(max_key_length<sp/>+<sp/>2)<sp/>&lt;&lt;<sp/>key<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::visit([&amp;os](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>val)<sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>T<sp/>=<sp/>std::decay_t&lt;decltype(val)&gt;;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(std::is_same_v&lt;T,<sp/>std::list&lt;int&gt;&gt;<sp/>||<sp/>std::is_same_v&lt;T,<sp/>std::list&lt;Real&gt;&gt;)<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;[<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>elem<sp/>:<sp/>val)<sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>elem<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>val;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},<sp/>value);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os;</highlight></codeline>
<codeline lineno="78"><highlight class="normal">}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Explicit<sp/>template<sp/>instantiations<sp/>for<sp/>CGAL<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GeometricDataHolder::set&lt;gtp::Point2D&gt;(std::string_view,<sp/><ref refid="type_8h_1aaaf5a4f3fcdfb59de2f926961baa8ad9" kindref="member">gtp::Point2D</ref>);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>std::optional&lt;gtp::Point2D&gt;<sp/>GeometricDataHolder::get&lt;gtp::Point2D&gt;(std::string_view)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GeometricDataHolder::set&lt;gtp::Vector2D&gt;(std::string_view,<sp/><ref refid="type_8h_1ac4223c9df6fc9e13ce379144da5b09aa" kindref="member">gtp::Vector2D</ref>);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>std::optional&lt;gtp::Vector2D&gt;<sp/>GeometricDataHolder::get&lt;gtp::Vector2D&gt;(std::string_view)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GeometricDataHolder::set&lt;gtp::Point3D&gt;(std::string_view,<sp/><ref refid="type_8h_1ac7e02506cf8ef76c662fc459a35bc5f6" kindref="member">gtp::Point3D</ref>);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>std::optional&lt;gtp::Point3D&gt;<sp/>GeometricDataHolder::get&lt;gtp::Point3D&gt;(std::string_view)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GeometricDataHolder::set&lt;gtp::Vector3D&gt;(std::string_view,<sp/><ref refid="type_8h_1a7724755c44fb4913c5f7a3dc1a00c7c3" kindref="member">gtp::Vector3D</ref>);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>std::optional&lt;gtp::Vector3D&gt;<sp/>GeometricDataHolder::get&lt;gtp::Vector3D&gt;(std::string_view)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GeometricDataHolder::set&lt;std::list&lt;int&gt;&gt;(std::string_view,<sp/>std::list&lt;int&gt;);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>std::optional&lt;std::list&lt;int&gt;&gt;<sp/>GeometricDataHolder::get&lt;std::list&lt;int&gt;&gt;(std::string_view)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GeometricDataHolder::set&lt;std::list&lt;Real&gt;&gt;(std::string_view,<sp/>std::list&lt;Real&gt;);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>std::optional&lt;std::list&lt;Real&gt;&gt;<sp/>GeometricDataHolder::get&lt;std::list&lt;Real&gt;&gt;(std::string_view)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><ref refid="namespace_8h_1a79d315e8c3400ea5f4ad4175a85d291c" kindref="member">VORMAKER_NAMESPACE_CLOSE</ref></highlight></codeline>
    </programlisting>
    <location file="VoronoiMeshMaker/src/VoronoiMeshMaker/Parameters/GeometricDataHolder.cpp"/>
  </compounddef>
</doxygen>
